{"version":3,"sources":["components/UI/Input.js","containers/ContactData.js","containers/Auth.js"],"names":["InputWrapper","styled","div","_templateObject","Label","label","_templateObject2","Input","input","_templateObject3","props","invalid","Textarea","textarea","_templateObject4","Select","select","_templateObject5","ValidationError","p","_templateObject6","inputElement","elementType","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Object","assign","elementConfig","value","touched","onChange","changed","options","map","option","key","displayValue","validationError","errorMessage","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ingredients","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","_home_kiper_Programming_burger_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","setState","_this2","this","formElementsArray","push","id","config","form","react__WEBPACK_IMPORTED_MODULE_7___default","onSubmit","element","_components_UI_Input__WEBPACK_IMPORTED_MODULE_12__","_components_UI_Button__WEBPACK_IMPORTED_MODULE_10__","success","disabled","loading","_components_UI_Spinner__WEBPACK_IMPORTED_MODULE_11__","StyledForm","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Auth","controls","isEmail","password","isSignup","controlName","updatedControls","_home_kiper_Programming_burger_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","submitHandler","onAuth","switchAuthModeHandler","prevState","buildingBurger","authRedirectPath","onSetAuthRedirectPath","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input__WEBPACK_IMPORTED_MODULE_9__","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","_ContactData__WEBPACK_IMPORTED_MODULE_12__","onClick","danger","building"],"mappings":"+2CAGA,IAoDMA,EAAeC,IAAOC,IAAVC,KAMZC,EAAQH,IAAOI,MAAVC,KAMLC,EAAQN,IAAOO,MAAVC,IAEC,SAAAC,GAAK,OAAIA,EAAMC,QAAU,gBAAkB,kBACjC,SAAAD,GAAK,OAAIA,EAAMC,QAAU,UAAY,UAYrDC,EAAWX,IAAOY,SAAVC,IAEF,SAAAJ,GAAK,OAAIA,EAAMC,QAAU,gBAAkB,kBACjC,SAAAD,GAAK,OAAIA,EAAMC,QAAU,UAAY,UAYrDI,EAASd,IAAOe,OAAVC,IAEA,SAAAP,GAAK,OAAIA,EAAMC,QAAU,gBAAkB,kBACjC,SAAAD,GAAK,OAAIA,EAAMC,QAAU,UAAY,UAYrDO,EAAkBjB,IAAOkB,EAAVC,KAKNZ,IAlHD,SAAAE,GACZ,IAAIW,EAAe,KAEnB,OAAQX,EAAMY,aACZ,IAAM,QACJD,EAAeE,EAAAC,EAAAC,cAAClB,EAADmB,OAAAC,OAAA,GACPjB,EAAMkB,cADC,CAEXC,MAAOnB,EAAMmB,MACblB,QAASD,EAAMC,SAAWD,EAAMoB,QAChCC,SAAUrB,EAAMsB,WACpB,MACF,IAAM,WACJX,EAAeE,EAAAC,EAAAC,cAACb,EAADc,OAAAC,OAAA,GACPjB,EAAMkB,cADC,CAEXC,MAAOnB,EAAMmB,MACblB,QAASD,EAAMC,SAAWD,EAAMoB,QAChCC,SAAUrB,EAAMsB,WACpB,MACF,IAAM,SACJX,EACAE,EAAAC,EAAAC,cAACV,EAAD,CACIc,MAAOnB,EAAMmB,MACbE,SAAUrB,EAAMsB,SACjBtB,EAAMkB,cAAcK,QAAQC,IAAI,SAAAC,GAAM,OACrCZ,EAAAC,EAAAC,cAAA,UAAQW,IAAKD,EAAON,MAAOA,MAAOM,EAAON,OACtCM,EAAOE,iBAKd,MACF,QACEhB,EAAeE,EAAAC,EAAAC,cAAClB,EAADmB,OAAAC,OAAA,GACPjB,EAAMkB,cADC,CAEXC,MAAOnB,EAAMmB,MACblB,QAASD,EAAMC,SAAWD,EAAMoB,QAChCC,SAAUrB,EAAMsB,WAExB,IAAIM,EAAkB,KAItB,OAHI5B,EAAMC,SAAWD,EAAMoB,UACzBQ,EAAkBf,EAAAC,EAAAC,cAACP,EAAD,KAAkBR,EAAM6B,eAG1ChB,EAAAC,EAAAC,cAACzB,EAAD,KACEuB,EAAAC,EAAAC,cAACrB,EAAD,KAAQM,EAAML,OACbgB,EACAiB,yfCrCDE,6MAEJC,MAAQ,CACNC,UAAW,CACTC,KAAM,CACJrB,YAAa,QACbM,cAAe,CACbgB,KAAM,OACNC,YAAa,aAEfhB,MAAO,GACPiB,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPlB,SAAS,EACTS,aAAc,0BAEhBU,OAAQ,CACN3B,YAAa,QACbM,cAAe,CACbgB,KAAM,OACNC,YAAa,WAEfhB,MAAO,GACPiB,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPlB,SAAS,EACTS,aAAc,6BAEhBW,QAAS,CACP5B,YAAa,QACbM,cAAe,CACbgB,KAAM,OACNC,YAAa,YAEfhB,MAAO,GACPiB,WAAY,CACVC,UAAU,EACVI,UAAW,EACXC,UAAW,GAEbJ,OAAO,EACPlB,SAAS,EACTS,aAAc,oCAEhBc,QAAS,CACP/B,YAAa,QACbM,cAAe,CACbgB,KAAM,OACNC,YAAa,WAEfhB,MAAO,GACPiB,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPlB,SAAS,EACTS,aAAc,6BAEhBe,MAAO,CACLhC,YAAa,QACbM,cAAe,CACbgB,KAAM,QACNC,YAAa,eAEfhB,MAAO,GACPiB,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPlB,SAAS,EACTS,aAAc,wBAEhBgB,eAAgB,CACdjC,YAAa,SACbM,cAAe,CACbK,QAAS,CACP,CAACJ,MAAO,UAAWQ,aAAc,WACjC,CAACR,MAAO,WAAYQ,aAAc,cAGtCR,MAAO,UACPiB,WAAY,GACZE,OAAO,IAGXQ,aAAa,KAEfC,aAAe,SAACC,GACdA,EAAMC,iBAEN,IAAMC,EAAW,GACjB,IAAK,IAAIC,KAAyBC,EAAKrB,MAAMC,UAC3CkB,EAASC,GAAyBC,EAAKrB,MAAMC,UAAUmB,GAAuBhC,MAGhF,IAAMkC,EAAQ,CACZC,YAAaF,EAAKpD,MAAMsD,YACxBC,MAAOH,EAAKpD,MAAMuD,MAClBC,UAAWN,EACXO,OAAQL,EAAKpD,MAAMyD,QAGrBL,EAAKpD,MAAM0D,cAAcL,EAAOD,EAAKpD,MAAM2D,UAG7CC,oBAAsB,SAACZ,EAAOa,GAC5B,IAAMC,EAAqBC,YAAaX,EAAKrB,MAAMC,UAAU6B,GAAkB,CAC7E1C,MAAO6B,EAAMgB,OAAO7C,MACpBmB,MAAQ2B,YAAcjB,EAAMgB,OAAO7C,MAAOiC,EAAKrB,MAAMC,UAAU6B,GAAiBzB,YAChFhB,SAAS,IAGL8C,EAAmBH,YAAaX,EAAKrB,MAAMC,UAAZhB,OAAAmD,EAAA,EAAAnD,CAAA,GAClC6C,EAAkBC,IAGjBhB,GAAc,EAClB,IAAK,IAAIe,KAAmBK,EAC1BpB,EAAcoB,EAAiBL,GAAiBvB,OAASQ,EAG3DM,EAAKgB,SAAS,CAACpC,UAAWkC,EAAkBpB,YAAaA,6EAGlD,IAAAuB,EAAAC,KACDC,EAAoB,GAC1B,IAAK,IAAI7C,KAAO4C,KAAKvC,MAAMC,UACzBuC,EAAkBC,KAAK,CACrBC,GAAI/C,EACJgD,OAAQJ,KAAKvC,MAAMC,UAAUN,KAIjC,IAAIiD,EACFC,EAAA9D,EAAAC,cAAA,QAAM8D,SAAUP,KAAKvB,cAClBwB,EAAkB/C,IAAI,SAAAsD,GAAO,OAC5BF,EAAA9D,EAAAC,cAACgE,EAAA,EAAD,CACErD,IAAKoD,EAAQL,GACb7D,YAAakE,EAAQJ,OAAO9D,YAC5BM,cAAe4D,EAAQJ,OAAOxD,cAC9BC,MAAO2D,EAAQJ,OAAOvD,MACtBlB,SAAU6E,EAAQJ,OAAOpC,MACzBlB,QAAS0D,EAAQJ,OAAOtD,QACxBS,aAAciD,EAAQJ,OAAO7C,aAC7BP,QAAS,SAAC0B,GAAD,OAAWqB,EAAKT,oBAAoBZ,EAAO8B,EAAQL,SAEhEG,EAAA9D,EAAAC,cAACiE,EAAA,EAAD,CAAQC,SAAO,EAACC,UAAWZ,KAAKvC,MAAMe,aAAtC,UAMJ,OAHIwB,KAAKtE,MAAMmF,UACbR,EAAOC,EAAA9D,EAAAC,cAACqE,EAAA,EAAD,OAGPR,EAAA9D,EAAAC,cAACsE,EAAD,KACET,EAAA9D,EAAAC,cAAA,qCACC4D,UA/JiBW,aAqKbD,EAAa9F,IAAOC,IAAVC,KA6BR8F,gBAhBS,SAAAxD,GACtB,MAAO,CACLuB,YAAavB,EAAMyD,cAAclC,YACjCC,MAAOxB,EAAMyD,cAAcC,WAC3BN,QAASpD,EAAMsB,MAAM8B,QACrBxB,MAAO5B,EAAM2D,KAAK/B,MAClBF,OAAQ1B,EAAM2D,KAAKjC,SAII,SAAAkC,GACzB,MAAO,CACLjC,cAAe,SAAEF,EAAWG,GAAb,OAAwBgC,EAASC,IAAwBpC,EAAWG,OAIxE4B,CAA6CM,YAAiB/D,EAAagE,+KCnMpFC,6MAEJhE,MAAQ,CACNiE,SAAU,CACRpD,MAAO,CACLhC,YAAa,QACbM,cAAe,CACbgB,KAAM,QACNC,YAAa,iBAEfhB,MAAO,GACPiB,WAAY,CACVC,UAAU,EACV4D,SAAS,GAEX3D,OAAO,EACPlB,SAAS,EACTS,aAAc,sBAEhBqE,SAAU,CACRtF,YAAa,QACbM,cAAe,CACbgB,KAAM,WACNC,YAAa,YAEfhB,MAAO,GACPiB,WAAY,CACVC,UAAU,EACVI,UAAW,GAEbH,OAAO,EACPlB,SAAS,EACTS,aAAc,2CAGlBsE,UAAU,KASZvC,oBAAsB,SAACZ,EAAOoD,GAC5B,IAAMC,EAAkBtC,YAAaX,EAAKrB,MAAMiE,SAAZhF,OAAAsF,EAAA,EAAAtF,CAAA,GACjCoF,EAAcrC,YAAaX,EAAKrB,MAAMiE,SAASI,GAAa,CAC3DjF,MAAO6B,EAAMgB,OAAO7C,MACpBmB,MAAO2B,YAAcjB,EAAMgB,OAAO7C,MAAOiC,EAAKrB,MAAMiE,SAASI,GAAahE,YAC1EhB,SAAS,MAGbgC,EAAKgB,SAAS,CAAC4B,SAAUK,OAG3BE,cAAgB,SAAAvD,GACdA,EAAMC,iBACNG,EAAKpD,MAAMwG,OAAOpD,EAAKrB,MAAMiE,SAASpD,MAAMzB,MAAOiC,EAAKrB,MAAMiE,SAASE,SAAS/E,MAAOiC,EAAKrB,MAAMoE,aAGpGM,sBAAwB,WACtBrD,EAAKgB,SAAS,SAAAsC,GACZ,MAAO,CACLP,UAAWO,EAAUP,gGAxBpB7B,KAAKtE,MAAM2G,gBAAkD,MAAhCrC,KAAKtE,MAAM4G,kBAC3CtC,KAAKtE,MAAM6G,yDA4BL,IAAAxC,EAAAC,KACFC,EAAoB,GAC1B,IAAK,IAAI7C,KAAO4C,KAAKvC,MAAMiE,SACzBzB,EAAkBC,KAAK,CACrBC,GAAI/C,EACJgD,OAAQJ,KAAKvC,MAAMiE,SAAStE,KAIhC,IAAIiD,EAAOJ,EAAkB/C,IAAI,SAAAsD,GAAO,OACtCgC,EAAAhG,EAAAC,cAACgG,EAAA,EAAD,CACErF,IAAKoD,EAAQL,GACb7D,YAAakE,EAAQJ,OAAO9D,YAC5BM,cAAe4D,EAAQJ,OAAOxD,cAC9BC,MAAO2D,EAAQJ,OAAOvD,MACtBlB,SAAU6E,EAAQJ,OAAOpC,MACzBlB,QAAS0D,EAAQJ,OAAOtD,QACxBS,aAAciD,EAAQJ,OAAO7C,aAC7BP,QAAS,SAAC0B,GAAD,OAAWqB,EAAKT,oBAAoBZ,EAAO8B,EAAQL,SAG5DH,KAAKtE,MAAMmF,UACbR,EAAOmC,EAAAhG,EAAAC,cAACqE,EAAA,EAAD,OAGT,IAAIvD,EAAe,KACfyC,KAAKtE,MAAMgH,QACbnF,EACEiF,EAAAhG,EAAAC,cAAA,SAAIuD,KAAKtE,MAAMgH,MAAMC,UAIzB,IAAIC,EAAe,KAKnB,OAJI5C,KAAKtE,MAAMmH,kBACbD,EAAeJ,EAAAhG,EAAAC,cAACqG,EAAA,EAAD,CAAUC,GAAI/C,KAAKtE,MAAM4G,oBAIxCE,EAAAhG,EAAAC,cAACuG,EAAA,EAAD,KACGJ,EACArF,EACDiF,EAAAhG,EAAAC,cAAA,QAAM8D,SAAUP,KAAKiC,eAClB5B,EACDmC,EAAAhG,EAAAC,cAACiE,EAAA,EAAD,CAAQC,SAAO,GAAf,WAEF6B,EAAAhG,EAAAC,cAACiE,EAAA,EAAD,CACEuC,QAASjD,KAAKmC,sBACde,QAAM,GAFR,aAEoBlD,KAAKvC,MAAMoE,SAAW,UAAY,mBAnH3Cb,aA0IJC,sBAjBS,SAAAxD,GACtB,MAAO,CACLoD,QAASpD,EAAM2D,KAAKP,QACpB6B,MAAOjF,EAAM2D,KAAKsB,MAClBG,gBAAsC,OAArBpF,EAAM2D,KAAK/B,MAC5BgD,eAAgB5E,EAAMyD,cAAciC,SACpCb,iBAAkB7E,EAAM2D,KAAKkB,mBAIN,SAAAjB,GACzB,MAAO,CACLa,OAAQ,SAAE5D,EAAOsD,EAAUC,GAAnB,OAAiCR,EAASC,IAAahD,EAAOsD,EAAUC,KAChFU,sBAAuB,kBAAMlB,EAASC,IAA4B,SAIvDL,CAA8CQ","file":"static/js/3.c2e734dc.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst input = props => {\n  let inputElement = null;\n\n  switch (props.elementType) {\n    case ('input'):\n      inputElement = <Input \n          {...props.elementConfig} \n          value={props.value}\n          invalid={props.invalid && props.touched}\n          onChange={props.changed}/>;\n      break;\n    case ('textarea'):\n      inputElement = <Textarea \n          {...props.elementConfig} \n          value={props.value}\n          invalid={props.invalid && props.touched}\n          onChange={props.changed}/>;\n      break;\n    case ('select'):\n      inputElement = (\n      <Select \n          value={props.value} \n          onChange={props.changed}>\n        {props.elementConfig.options.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.displayValue}\n          </option>\n        ))}\n      </Select>\n      );\n      break;\n    default: \n      inputElement = <Input \n          {...props.elementConfig} \n          value={props.value}\n          invalid={props.invalid && props.touched}\n          onChange={props.changed}/>;\n  }\n  let validationError = null;\n  if (props.invalid && props.touched) {\n    validationError = <ValidationError>{props.errorMessage}</ValidationError>\n  }\n  return (\n    <InputWrapper>\n      <Label>{props.label}</Label>\n      {inputElement}\n      {validationError}\n    </InputWrapper>\n  );\n\n}\n\nconst InputWrapper = styled.div`\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n  display: block;\n  margin-bottom: 8px;\n`;\n//TODO: figure out how to do it by one styled component\nconst Input = styled.input`\n  outline: none;\n  border: ${props => props.invalid ? \"1px solid red\" : \"1px solid #ccc\"};\n  background-color: ${props => props.invalid ? \"#fda49a\" : \"white\"};\n  font: inherit;\n  padding: 6px 10px;\n  display: block;\n  width: 100%;\n  box-sizing: border-box;\n  :focus {\n    background-color: #ccc;\n    outline: none;\n  }\n`;\n\nconst Textarea = styled.textarea`\n  outline: none;\n  border: ${props => props.invalid ? \"1px solid red\" : \"1px solid #ccc\"};\n  background-color: ${props => props.invalid ? \"#fda49a\" : \"white\"};\n  font: inherit;\n  padding: 6px 10px;\n  display: block;\n  width: 100%;\n  box-sizing: border-box;\n  :focus {\n    background-color: #ccc;\n    outline: none;\n  }\n`;\n\nconst Select = styled.select`\n  outline: none;\n  border: ${props => props.invalid ? \"1px solid red\" : \"1px solid #ccc\"};\n  background-color: ${props => props.invalid ? \"#fda49a\" : \"white\"};\n  font: inherit;\n  padding: 6px 10px;\n  display: block;\n  width: 100%;\n  box-sizing: border-box;\n  :focus {\n    background-color: #ccc;\n    outline: none;\n  }\n`;\n\nconst ValidationError = styled.p`\n  color: red;\n  margin: 5px 0;\n`;\n\nexport default input;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport styled from 'styled-components';\nimport Button from '../components/UI/Button';\nimport Spinner from '../components/UI/Spinner';\nimport Input from '../components/UI/Input';\nimport axios from '../axios-orders';\nimport withErrorHandler from '../hoc/withErrorHandler';\nimport * as actions from '../store/actions/index';\nimport { updateObject, checkValidity } from '../shared/utility';\n\nclass ContactData extends Component {\n\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Please enter your name\" \n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Address'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Please enter your address\" \n      },\n      zipCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'ZIP code'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"ZIP-code must be exacly 5 digits\" \n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Please enter your country\"  \n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your E-mail'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Invalid email format\"\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest'},\n            {value: 'cheapest', displayValue: 'Cheapest'},\n          ]\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true\n      }\n    },\n    formIsValid: false\n  }\n  orderHandler = (event) => {\n    event.preventDefault();\n\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n    }\n\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    }\n\n    this.props.onOrderBurger(order, this.props.token);\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid:  checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n      touched: true\n    });\n\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n    \n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid}); \n  }\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      })\n    }\n\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(element => (\n          <Input \n            key={element.id}\n            elementType={element.config.elementType}\n            elementConfig={element.config.elementConfig}\n            value={element.config.value}\n            invalid={!element.config.valid}\n            touched={element.config.touched}\n            errorMessage={element.config.errorMessage}\n            changed={(event) => this.inputChangedHandler(event, element.id)}/>\n        ))}\n        <Button success disabled={!this.state.formIsValid}>ORDER</Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return(\n      <StyledForm>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </StyledForm>\n    );\n  }\n}\n\nexport const StyledForm = styled.div`\n  margin: 20px auto;\n  width: 80%;\n  text-align: center;\n  box-shadow: 0 2px 3px #ccc;\n  border: 1px solid #eee;\n  padding: 10px;\n  box-sizing: border-box;\n  @media (min-width: 600px) {\n    width: 500px;\n  }\n`;\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: ( orderData, token ) => dispatch(actions.purchaseBurger( orderData, token ))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../components/UI/Input';\nimport Button from '../components/UI/Button';\nimport Spinner from '../components/UI/Spinner';\nimport { StyledForm } from './ContactData';\nimport * as actions from '../store/actions/index';\nimport { updateObject, checkValidity } from '../shared/utility'; \n\nclass Auth extends Component {\n  \n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Email address'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Please enter email\" \n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Password must be at least 6 characters\" \n      }\n    },\n    isSignup: true\n  }\n\n  componentDidMount () {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls,{\n      [controlName]: updateObject(this.state.controls[controlName],{\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      })\n    });\n    this.setState({controls: updatedControls});\n  }\n\n  submitHandler = event => {\n    event.preventDefault();\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n  }\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return {\n        isSignup: !prevState.isSignup\n      };\n    });\n  }\n\n  render () {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      })\n    }\n\n    let form = formElementsArray.map(element => (\n      <Input \n        key={element.id}\n        elementType={element.config.elementType}\n        elementConfig={element.config.elementConfig}\n        value={element.config.value}\n        invalid={!element.config.valid}\n        touched={element.config.touched}\n        errorMessage={element.config.errorMessage}\n        changed={(event) => this.inputChangedHandler(event, element.id)}/>\n    ));\n    \n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage =(\n        <p>{this.props.error.message}</p>\n      );\n    }\n    \n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath}/>\n    }\n\n    return (\n      <StyledForm>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button success>SUBMIT</Button>\n        </form>\n        <Button \n          onClick={this.switchAuthModeHandler} \n          danger>SWITCH TO {this.state.isSignup ? 'SIGN-IN' : 'SIGN-UP'}</Button>\n      </StyledForm>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: ( email, password, isSignup ) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Auth);\n"],"sourceRoot":""}