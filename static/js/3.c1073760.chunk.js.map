{"version":3,"sources":["containers/ContactData.js","containers/Auth.js","components/UI/Input.js"],"names":["ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","errorMessage","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ingredients","props","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","Object","_home_kiper_Programming_burger_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","setState","_this2","this","formElementsArray","key","push","id","config","form","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","onSubmit","map","element","_components_UI_Input__WEBPACK_IMPORTED_MODULE_12__","invalid","changed","_components_UI_Button__WEBPACK_IMPORTED_MODULE_10__","success","disabled","loading","_components_UI_Spinner__WEBPACK_IMPORTED_MODULE_11__","StyledForm","Component","styled","div","_templateObject","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Auth","controls","isEmail","password","isSignup","controlName","updatedControls","_home_kiper_Programming_burger_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","submitHandler","onAuth","switchAuthModeHandler","prevState","buildingBurger","authRedirectPath","onSetAuthRedirectPath","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input__WEBPACK_IMPORTED_MODULE_9__","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","_ContactData__WEBPACK_IMPORTED_MODULE_12__","onClick","danger","building","InputWrapper","Label","label","_templateObject2","Input","input","_templateObject3","Textarea","textarea","_templateObject4","Select","select","_templateObject5","ValidationError","p","_templateObject6","inputElement","react__WEBPACK_IMPORTED_MODULE_1___default","assign","onChange","option","validationError"],"mappings":"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","file":"static/js/3.c1073760.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport styled from 'styled-components';\nimport Button from '../components/UI/Button';\nimport Spinner from '../components/UI/Spinner';\nimport Input from '../components/UI/Input';\nimport axios from '../axios-orders';\nimport withErrorHandler from '../hoc/withErrorHandler';\nimport * as actions from '../store/actions/index';\nimport { updateObject, checkValidity } from '../shared/utility';\n\nclass ContactData extends Component {\n\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Please enter your name\" \n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Address'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Please enter your address\" \n      },\n      zipCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'ZIP code'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"ZIP-code must be exacly 5 digits\" \n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Please enter your country\"  \n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your E-mail'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Invalid email format\"\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest'},\n            {value: 'cheapest', displayValue: 'Cheapest'},\n          ]\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true\n      }\n    },\n    formIsValid: false\n  }\n  orderHandler = (event) => {\n    event.preventDefault();\n\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n    }\n\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    }\n\n    this.props.onOrderBurger(order, this.props.token);\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid:  checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n      touched: true\n    });\n\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n    \n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid}); \n  }\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      })\n    }\n\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(element => (\n          <Input \n            key={element.id}\n            elementType={element.config.elementType}\n            elementConfig={element.config.elementConfig}\n            value={element.config.value}\n            invalid={!element.config.valid}\n            touched={element.config.touched}\n            errorMessage={element.config.errorMessage}\n            changed={(event) => this.inputChangedHandler(event, element.id)}/>\n        ))}\n        <Button success disabled={!this.state.formIsValid}>ORDER</Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return(\n      <StyledForm>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </StyledForm>\n    );\n  }\n}\n\nexport const StyledForm = styled.div`\n  margin: 20px auto;\n  width: 80%;\n  text-align: center;\n  box-shadow: 0 2px 3px #ccc;\n  border: 1px solid #eee;\n  padding: 10px;\n  box-sizing: border-box;\n  @media (min-width: 600px) {\n    width: 500px;\n  }\n`;\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: ( orderData, token ) => dispatch(actions.purchaseBurger( orderData, token ))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport Input from '../components/UI/Input';\nimport Button from '../components/UI/Button';\nimport Spinner from '../components/UI/Spinner';\nimport { StyledForm } from './ContactData';\nimport * as actions from '../store/actions/index';\nimport { updateObject, checkValidity } from '../shared/utility'; \n\nclass Auth extends Component {\n  \n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Email address'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Please enter email\" \n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'Password'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Password must be at least 6 characters\" \n      }\n    },\n    isSignup: true\n  }\n\n  componentDidMount () {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls,{\n      [controlName]: updateObject(this.state.controls[controlName],{\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      })\n    });\n    this.setState({controls: updatedControls});\n  }\n\n  submitHandler = event => {\n    event.preventDefault();\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n  }\n\n  switchAuthModeHandler = () => {\n    this.setState(prevState => {\n      return {\n        isSignup: !prevState.isSignup\n      };\n    });\n  }\n\n  render () {\n    const formElementsArray = [];\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      })\n    }\n\n    let form = formElementsArray.map(element => (\n      <Input \n        key={element.id}\n        elementType={element.config.elementType}\n        elementConfig={element.config.elementConfig}\n        value={element.config.value}\n        invalid={!element.config.valid}\n        touched={element.config.touched}\n        errorMessage={element.config.errorMessage}\n        changed={(event) => this.inputChangedHandler(event, element.id)}/>\n    ));\n    \n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage =(\n        <p>{this.props.error.message}</p>\n      );\n    }\n    \n    let authRedirect = null;\n    if (this.props.isAuthenticated) {\n      authRedirect = <Redirect to={this.props.authRedirectPath}/>\n    }\n\n    return (\n      <StyledForm>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button success>SUBMIT</Button>\n        </form>\n        <Button \n          onClick={this.switchAuthModeHandler} \n          danger>SWITCH TO {this.state.isSignup ? 'SIGN-IN' : 'SIGN-UP'}</Button>\n      </StyledForm>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: ( email, password, isSignup ) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Auth);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst input = props => {\n  let inputElement = null;\n\n  switch (props.elementType) {\n    case ('input'):\n      inputElement = <Input \n          {...props.elementConfig} \n          value={props.value}\n          invalid={props.invalid && props.touched}\n          onChange={props.changed}/>;\n      break;\n    case ('textarea'):\n      inputElement = <Textarea \n          {...props.elementConfig} \n          value={props.value}\n          invalid={props.invalid && props.touched}\n          onChange={props.changed}/>;\n      break;\n    case ('select'):\n      inputElement = (\n      <Select \n          value={props.value} \n          onChange={props.changed}>\n        {props.elementConfig.options.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.displayValue}\n          </option>\n        ))}\n      </Select>\n      );\n      break;\n    default: \n      inputElement = <Input \n          {...props.elementConfig} \n          value={props.value}\n          invalid={props.invalid && props.touched}\n          onChange={props.changed}/>;\n  }\n  let validationError = null;\n  if (props.invalid && props.touched) {\n    validationError = <ValidationError>{props.errorMessage}</ValidationError>\n  }\n  return (\n    <InputWrapper>\n      <Label>{props.label}</Label>\n      {inputElement}\n      {validationError}\n    </InputWrapper>\n  );\n\n}\n\nconst InputWrapper = styled.div`\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n  display: block;\n  margin-bottom: 8px;\n`;\n//TODO: figure out how to do it by one styled component\nconst Input = styled.input`\n  outline: none;\n  border: ${props => props.invalid ? \"1px solid red\" : \"1px solid #ccc\"};\n  background-color: ${props => props.invalid ? \"#fda49a\" : \"white\"};\n  font: inherit;\n  padding: 6px 10px;\n  display: block;\n  width: 100%;\n  box-sizing: border-box;\n  :focus {\n    background-color: #ccc;\n    outline: none;\n  }\n`;\n\nconst Textarea = styled.textarea`\n  outline: none;\n  border: ${props => props.invalid ? \"1px solid red\" : \"1px solid #ccc\"};\n  background-color: ${props => props.invalid ? \"#fda49a\" : \"white\"};\n  font: inherit;\n  padding: 6px 10px;\n  display: block;\n  width: 100%;\n  box-sizing: border-box;\n  :focus {\n    background-color: #ccc;\n    outline: none;\n  }\n`;\n\nconst Select = styled.select`\n  outline: none;\n  border: ${props => props.invalid ? \"1px solid red\" : \"1px solid #ccc\"};\n  background-color: ${props => props.invalid ? \"#fda49a\" : \"white\"};\n  font: inherit;\n  padding: 6px 10px;\n  display: block;\n  width: 100%;\n  box-sizing: border-box;\n  :focus {\n    background-color: #ccc;\n    outline: none;\n  }\n`;\n\nconst ValidationError = styled.p`\n  color: red;\n  margin: 5px 0;\n`;\n\nexport default input;\n"],"sourceRoot":""}