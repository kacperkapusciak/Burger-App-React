{"version":3,"sources":["containers/ContactData.js","components/Order/CheckoutSummary.js","containers/Checkout.js","components/UI/Input.js"],"names":["ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","errorMessage","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ingredients","props","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","Object","_home_kiper_Programming_burger_react_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","setState","_this2","this","formElementsArray","key","push","id","config","form","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","onSubmit","map","element","_components_UI_Input__WEBPACK_IMPORTED_MODULE_12__","invalid","changed","_components_UI_Button__WEBPACK_IMPORTED_MODULE_10__","success","disabled","loading","_components_UI_Spinner__WEBPACK_IMPORTED_MODULE_11__","StyledForm","Component","styled","div","_templateObject","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Styling","Wrapper","_templateObject2","checkoutSummary","react_default","Burger","Button","danger","onClick","checkoutCancelled","checkoutContinued","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","purchasedRedirect","purchased","CheckoutSummary","Route","path","match","component","InputWrapper","Label","label","Input","input","_templateObject3","Textarea","textarea","_templateObject4","Select","select","_templateObject5","ValidationError","p","_templateObject6","inputElement","react__WEBPACK_IMPORTED_MODULE_1___default","assign","onChange","option","validationError"],"mappings":"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","file":"static/js/1.1b508bd8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport styled from 'styled-components';\nimport Button from '../components/UI/Button';\nimport Spinner from '../components/UI/Spinner';\nimport Input from '../components/UI/Input';\nimport axios from '../axios-orders';\nimport withErrorHandler from '../hoc/withErrorHandler';\nimport * as actions from '../store/actions/index';\nimport { updateObject, checkValidity } from '../shared/utility';\n\nclass ContactData extends Component {\n\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Your Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Please enter your name\" \n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Address'\n        },\n        value: '',\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Please enter your address\" \n      },\n      zipCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'ZIP code'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"ZIP-code must be exacly 5 digits\" \n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Please enter your country\"  \n      },\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'email',\n          placeholder: 'Your E-mail'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        errorMessage: \"Invalid email format\"\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest'},\n            {value: 'cheapest', displayValue: 'Cheapest'},\n          ]\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true\n      }\n    },\n    formIsValid: false\n  }\n  orderHandler = (event) => {\n    event.preventDefault();\n\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n    }\n\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    }\n\n    this.props.onOrderBurger(order, this.props.token);\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid:  checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n      touched: true\n    });\n\n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n    \n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid}); \n  }\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      })\n    }\n\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(element => (\n          <Input \n            key={element.id}\n            elementType={element.config.elementType}\n            elementConfig={element.config.elementConfig}\n            value={element.config.value}\n            invalid={!element.config.valid}\n            touched={element.config.touched}\n            errorMessage={element.config.errorMessage}\n            changed={(event) => this.inputChangedHandler(event, element.id)}/>\n        ))}\n        <Button success disabled={!this.state.formIsValid}>ORDER</Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return(\n      <StyledForm>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </StyledForm>\n    );\n  }\n}\n\nexport const StyledForm = styled.div`\n  margin: 20px auto;\n  width: 80%;\n  text-align: center;\n  box-shadow: 0 2px 3px #ccc;\n  border: 1px solid #eee;\n  padding: 10px;\n  box-sizing: border-box;\n  @media (min-width: 600px) {\n    width: 500px;\n  }\n`;\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: ( orderData, token ) => dispatch(actions.purchaseBurger( orderData, token ))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\n","import React from 'react';\nimport Burger from '../Burger/Burger';\nimport Button from '../UI/Button';\nimport styled from 'styled-components';\n\nconst checkoutSummary = props => {\n  return (\n    <Styling>\n      <h1>We hope it tastes well!</h1>\n\n      <Wrapper>\n        <Burger ingredients={props.ingredients}/>\n      </Wrapper>\n\n      <Button danger onClick={props.checkoutCancelled}>CANCEL</Button>\n      <Button success onClick={props.checkoutContinued}>CONTINUE</Button>\n\n    </Styling>\n  );\n}\n\nconst Styling = styled.div`\n  text-align: center;\n  width: 80%;\n  margin: auto;\n`;\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n`;\n\nexport default checkoutSummary;\n","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../components/Order/CheckoutSummary';\nimport ContactData from './ContactData';\n\n\nclass Checkout extends Component {\n\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  }\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace('/checkout/contact-data');\n  }\n\n  render () {\n    let summary = <Redirect to=\"/\"/>\n\n    if (this.props.ingredients) {\n      const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary \n            ingredients={this.props.ingredients}\n            checkoutCancelled={this.checkoutCancelledHandler}\n            checkoutContinued={this.checkoutContinuedHandler}/>\n          <Route \n            path={this.props.match.path + '/contact-data'} \n            component={ContactData}/>  \n        </div>\n      )\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n  };\n};\n\n\nexport default connect( mapStateToProps )(Checkout);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst input = props => {\n  let inputElement = null;\n\n  switch (props.elementType) {\n    case ('input'):\n      inputElement = <Input \n          {...props.elementConfig} \n          value={props.value}\n          invalid={props.invalid && props.touched}\n          onChange={props.changed}/>;\n      break;\n    case ('textarea'):\n      inputElement = <Textarea \n          {...props.elementConfig} \n          value={props.value}\n          invalid={props.invalid && props.touched}\n          onChange={props.changed}/>;\n      break;\n    case ('select'):\n      inputElement = (\n      <Select \n          value={props.value} \n          onChange={props.changed}>\n        {props.elementConfig.options.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.displayValue}\n          </option>\n        ))}\n      </Select>\n      );\n      break;\n    default: \n      inputElement = <Input \n          {...props.elementConfig} \n          value={props.value}\n          invalid={props.invalid && props.touched}\n          onChange={props.changed}/>;\n  }\n  let validationError = null;\n  if (props.invalid && props.touched) {\n    validationError = <ValidationError>{props.errorMessage}</ValidationError>\n  }\n  return (\n    <InputWrapper>\n      <Label>{props.label}</Label>\n      {inputElement}\n      {validationError}\n    </InputWrapper>\n  );\n\n}\n\nconst InputWrapper = styled.div`\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n  display: block;\n  margin-bottom: 8px;\n`;\n//TODO: figure out how to do it by one styled component\nconst Input = styled.input`\n  outline: none;\n  border: ${props => props.invalid ? \"1px solid red\" : \"1px solid #ccc\"};\n  background-color: ${props => props.invalid ? \"#fda49a\" : \"white\"};\n  font: inherit;\n  padding: 6px 10px;\n  display: block;\n  width: 100%;\n  box-sizing: border-box;\n  :focus {\n    background-color: #ccc;\n    outline: none;\n  }\n`;\n\nconst Textarea = styled.textarea`\n  outline: none;\n  border: ${props => props.invalid ? \"1px solid red\" : \"1px solid #ccc\"};\n  background-color: ${props => props.invalid ? \"#fda49a\" : \"white\"};\n  font: inherit;\n  padding: 6px 10px;\n  display: block;\n  width: 100%;\n  box-sizing: border-box;\n  :focus {\n    background-color: #ccc;\n    outline: none;\n  }\n`;\n\nconst Select = styled.select`\n  outline: none;\n  border: ${props => props.invalid ? \"1px solid red\" : \"1px solid #ccc\"};\n  background-color: ${props => props.invalid ? \"#fda49a\" : \"white\"};\n  font: inherit;\n  padding: 6px 10px;\n  display: block;\n  width: 100%;\n  box-sizing: border-box;\n  :focus {\n    background-color: #ccc;\n    outline: none;\n  }\n`;\n\nconst ValidationError = styled.p`\n  color: red;\n  margin: 5px 0;\n`;\n\nexport default input;\n"],"sourceRoot":""}